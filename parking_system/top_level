library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity top_level is
    Port (
        clk : in STD_LOGIC; -- Clock principal
        echo1 : in STD_LOGIC;
        echo2 : in STD_LOGIC;
        trig1 : out STD_LOGIC;
        trig2 : out STD_LOGIC;
        CA    : out   std_logic;                   -- Cathode of segment A
        CB    : out   std_logic;                    -- Cathode of segment B
        CC    : out   std_logic;                    -- Cathode of segment C
        CD    : out   std_logic;                    -- Cathode of segment D
        CE    : out   std_logic;                    -- Cathode of segment E
        CF    : out   std_logic;                    -- Cathode of segment F
        CG    : out   std_logic;                    -- Cathode of segment G
        DP    : out   std_logic;                    -- Decimal point
        AN    : out   std_logic_vector(7 downto 0); -- Common anodes of all on-board displays
        BTNC  : in    std_logic;                    -- Clear the display
        red_led : out std_logic;
        green_led : out std_logic
    );
end top_level;

architecture Behavioral of top_level is
--    type state_type is (opened_state, closed_state);
--    signal current_state : state_type;
    
    -- Component Declarations
    component sensor is
      Port (
            clk : in STD_LOGIC;  -- Clock de 100MHz
            trigger : out STD_LOGIC;  -- Pino Trigger do HC-SR04
            echo : in STD_LOGIC;  -- Pino Echo do HC-SR04
            sensor_out : out STD_LOGIC
        );
    end component;
    
    component counter is
      generic(
        nbit : integer := 4
      );
      Port ( 
        clk : in std_logic;
        rst : in std_logic;
        s1 : in std_logic;
        s2 : in std_logic;
        count : out std_logic_vector(nbit - 1 downto 0) 
      );
    end component;
    
    component display is
            port (
                clear : in    std_logic;
                bin   : in    std_logic_vector(3 downto 0);
                seg   : out   std_logic_vector(6 downto 0)
            );
   end component;

    -- Internal Signals
    signal count_s1, count_s2 : std_logic := '0';
    signal sig_tmp : std_logic_vector(3 downto 0);

begin
    -- Sensor Instances
    sensor1 : sensor
        port map (
            clk => clk,
            trig => trig1,
            echo => echo1,
            sensor_out => count_s1
        );
        
    sensor2 : sensor
        port map (
            clk => clk,
            trig => trig2,
            echo => echo2,
            sensor_out => count_s1
        );

    -- Counter Instance
    count : counter
        generic map(
            nbit => 4
        )
        port map (
            clk => clk,
            s1 => count_s1,
            s2 => count_s2,
            rst => BTNC,
            count => sig_tmp
        );
        
    -- Display Instance
    disp : display
        port map (
            clear  => BTNC,
            bin    => sig_tmp,
            seg(6) => CA,
            seg(5) => CB,
            seg(4) => CC,
            seg(3) => CD,
            seg(2) => CE,
            seg(1) => CF,
            seg(0) => CG  -- Correctly mapping segments
        );

    DP <= '1'; -- Assume DP is always off in this context
    AN <= (others => '1'); -- Assuming only one display is active, adjust if multiple



end Behavioral;
